// TS3Client - A free TeamSpeak3 client implementation
// Copyright (C) 2017  TS3Client contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.






// *** DO NOT EDIT THIS FILE, IT HAS BEEN AUTO-GENERATED ***

namespace TS3Client.Messages
{
	using System;
	using Commands;
	using ClientUidT = System.String;
	using ClientDbIdT = System.UInt64;
	using ClientIdT = System.UInt16;
	using ChannelIdT = System.UInt64;
	using ServerGroupIdT = System.UInt64;
	using ChannelGroupIdT = System.UInt64;
	using TimeSpanSecondsT = System.TimeSpan;
	using TimeSpanMillisecT = System.TimeSpan;


	public sealed class ChannelChanged : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelChanged;
		

		public ChannelIdT ChannelId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ChannelCreated : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelCreated;
		

		public ChannelIdT ChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public int Order { get; set; }
		public string Name { get; set; }
		public string Topic { get; set; }
		public bool IsDefaultChannel { get; set; }
		public bool HasPassword { get; set; }
		public bool IsPermanent { get; set; }
		public bool IsSemiPermanent { get; set; }
		public Codec Codec { get; set; }
		public int CodecQuality { get; set; }
		public int NeededTalkPower { get; set; }
		public long IconId { get; set; }
		public int MaxClients { get; set; }
		public int MaxFamilyClients { get; set; }
		public int CodecLatencyFactor { get; set; }
		public bool IsUnencrypted { get; set; }
		public TimeSpanSecondsT DeleteDelay { get; set; }
		public bool IsMaxClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsInherited { get; set; }
		public string PhoneticName { get; set; }
		public ChannelIdT ChannelParentId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "channel_order": Order = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_name": Name = CommandDeserializer.DeserializeString(value); break;
			case "channel_topic": Topic = CommandDeserializer.DeserializeString(value); break;
			case "channel_flag_default": IsDefaultChannel = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_password": HasPassword = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_permanent": IsPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_semi_permanent": IsSemiPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_codec": Codec = CommandDeserializer.DeserializeEnum<Codec>(value); break;
			case "channel_codec_quality": CodecQuality = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_needed_talk_power": NeededTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "channel_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_maxfamilyclients": MaxFamilyClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_codec_latency_factor": CodecLatencyFactor = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_codec_is_unencrypted": IsUnencrypted = CommandDeserializer.DeserializeBool(value); break;
			case "channel_delete_delay": DeleteDelay = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "channel_flag_maxclients_unlimited": IsMaxClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_unlimited": IsMaxFamilyClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_inherited": IsMaxFamilyClientsInherited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_name_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "cpid": ChannelParentId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ChannelDeleted : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelDeleted;
		

		public ChannelIdT ChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ChannelEdited : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelEdited;
		

		public ChannelIdT ChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public int Order { get; set; }
		public string Name { get; set; }
		public string Topic { get; set; }
		public bool IsDefaultChannel { get; set; }
		public bool HasPassword { get; set; }
		public bool IsPermanent { get; set; }
		public bool IsSemiPermanent { get; set; }
		public Codec Codec { get; set; }
		public int CodecQuality { get; set; }
		public int NeededTalkPower { get; set; }
		public long IconId { get; set; }
		public int MaxClients { get; set; }
		public int MaxFamilyClients { get; set; }
		public int CodecLatencyFactor { get; set; }
		public bool IsUnencrypted { get; set; }
		public TimeSpanSecondsT DeleteDelay { get; set; }
		public bool IsMaxClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsInherited { get; set; }
		public string PhoneticName { get; set; }
		public MoveReason Reason { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "channel_order": Order = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_name": Name = CommandDeserializer.DeserializeString(value); break;
			case "channel_topic": Topic = CommandDeserializer.DeserializeString(value); break;
			case "channel_flag_default": IsDefaultChannel = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_password": HasPassword = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_permanent": IsPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_semi_permanent": IsSemiPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_codec": Codec = CommandDeserializer.DeserializeEnum<Codec>(value); break;
			case "channel_codec_quality": CodecQuality = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_needed_talk_power": NeededTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "channel_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_maxfamilyclients": MaxFamilyClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_codec_latency_factor": CodecLatencyFactor = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_codec_is_unencrypted": IsUnencrypted = CommandDeserializer.DeserializeBool(value); break;
			case "channel_delete_delay": DeleteDelay = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "channel_flag_maxclients_unlimited": IsMaxClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_unlimited": IsMaxFamilyClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_inherited": IsMaxFamilyClientsInherited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_name_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			
			}

		}
	}

	public sealed class ChannelList : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelList;
		

		public ChannelIdT ChannelId { get; set; }
		public ChannelIdT ChannelParentId { get; set; }
		public string Name { get; set; }
		public string Topic { get; set; }
		public Codec Codec { get; set; }
		public int CodecQuality { get; set; }
		public int MaxClients { get; set; }
		public int MaxFamilyClients { get; set; }
		public int Order { get; set; }
		public bool IsPermanent { get; set; }
		public bool IsSemiPermanent { get; set; }
		public bool IsDefaultChannel { get; set; }
		public bool HasPassword { get; set; }
		public int CodecLatencyFactor { get; set; }
		public bool IsUnencrypted { get; set; }
		public TimeSpanSecondsT DeleteDelay { get; set; }
		public bool IsMaxClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsUnlimited { get; set; }
		public bool IsMaxFamilyClientsInherited { get; set; }
		public int NeededTalkPower { get; set; }
		public bool ForcedSilence { get; set; }
		public string PhoneticName { get; set; }
		public long IconId { get; set; }
		public bool IsPrivate { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "cpid": ChannelParentId = CommandDeserializer.DeserializeUInt64(value); break;
			case "channel_name": Name = CommandDeserializer.DeserializeString(value); break;
			case "channel_topic": Topic = CommandDeserializer.DeserializeString(value); break;
			case "channel_codec": Codec = CommandDeserializer.DeserializeEnum<Codec>(value); break;
			case "channel_codec_quality": CodecQuality = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_maxfamilyclients": MaxFamilyClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_order": Order = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_flag_permanent": IsPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_semi_permanent": IsSemiPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_default": IsDefaultChannel = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_password": HasPassword = CommandDeserializer.DeserializeBool(value); break;
			case "channel_codec_latency_factor": CodecLatencyFactor = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_codec_is_unencrypted": IsUnencrypted = CommandDeserializer.DeserializeBool(value); break;
			case "channel_delete_delay": DeleteDelay = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "channel_flag_maxclients_unlimited": IsMaxClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_unlimited": IsMaxFamilyClientsUnlimited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_maxfamilyclients_inherited": IsMaxFamilyClientsInherited = CommandDeserializer.DeserializeBool(value); break;
			case "channel_needed_talk_power": NeededTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_forced_silence": ForcedSilence = CommandDeserializer.DeserializeBool(value); break;
			case "channel_name_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "channel_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "channel_flag_private": IsPrivate = CommandDeserializer.DeserializeBool(value); break;
			
			}

		}
	}

	public sealed class ChannelListFinished : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelListFinished;
		


		public void SetField(string name, string value)
		{

		}
	}

	public sealed class ChannelMoved : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelMoved;
		

		public int Order { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public MoveReason Reason { get; set; }
		public ChannelIdT ChannelParentId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "order": Order = CommandDeserializer.DeserializeInt32(value); break;
			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			case "cpid": ChannelParentId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ChannelPasswordChanged : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelPasswordChanged;
		

		public ChannelIdT ChannelId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ChannelSubscribed : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelSubscribed;
		

		public ChannelIdT ChannelId { get; set; }
		public TimeSpanSecondsT EmptySince { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "es": EmptySince = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			
			}

		}
	}

	public sealed class ChannelUnsubscribed : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ChannelUnsubscribed;
		

		public ChannelIdT ChannelId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ClientChannelGroupChanged : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientChannelGroupChanged;
		

		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ChannelGroupIdT ChannelGroupId { get; set; }
		public ChannelGroupIdT ChannelGroupIndex { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public ClientIdT ClientId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "cgid": ChannelGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "cgi": ChannelGroupIndex = CommandDeserializer.DeserializeUInt64(value); break;
			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			
			}

		}
	}

	public sealed class ClientChatComposing : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientChatComposing;
		

		public ClientIdT ClientId { get; set; }
		public ClientUidT ClientUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "cluid": ClientUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ClientEnterView : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientEnterView;
		

		public MoveReason Reason { get; set; }
		public ChannelIdT TargetChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public ClientIdT ClientId { get; set; }
		public ClientDbIdT DatabaseId { get; set; }
		public string NickName { get; set; }
		public ClientType ClientType { get; set; }
		public ChannelIdT SourceChannelId { get; set; }
		public ClientUidT Uid { get; set; }
		public string AvatarFlag { get; set; }
		public string Description { get; set; }
		public long IconId { get; set; }
		public bool IsInputMuted { get; set; }
		public bool IsOutputMuted { get; set; }
		public bool IsOutputOnlyMuted { get; set; }
		public bool IsInputHardware { get; set; }
		public bool IsClientOutputHardware { get; set; }
		public string Metadata { get; set; }
		public bool IsRecording { get; set; }
		public ChannelGroupIdT ChannelGroupId { get; set; }
		public ChannelGroupIdT InheritedChannelGroupFromChannelId { get; set; }
		public ServerGroupIdT[] ServerGroups { get; set; }
		public bool IsAway { get; set; }
		public string AwayMessage { get; set; }
		public int TalkPower { get; set; }
		public int RequestedTalkPower { get; set; }
		public string TalkPowerRequestMessage { get; set; }
		public bool IsTalker { get; set; }
		public bool IsPrioritySpeaker { get; set; }
		public int UnreadMessages { get; set; }
		public string PhoneticName { get; set; }
		public int NeededServerQueryViewPower { get; set; }
		public bool IsChannelCommander { get; set; }
		public string CountryCode { get; set; }
		public string Badges { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			case "ctid": TargetChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "client_database_id": DatabaseId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_nickname": NickName = CommandDeserializer.DeserializeString(value); break;
			case "client_type": ClientType = CommandDeserializer.DeserializeEnum<ClientType>(value); break;
			case "cfid": SourceChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_unique_identifier": Uid = CommandDeserializer.DeserializeString(value); break;
			case "client_flag_avatar": AvatarFlag = CommandDeserializer.DeserializeString(value); break;
			case "client_description": Description = CommandDeserializer.DeserializeString(value); break;
			case "client_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "client_input_muted": IsInputMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_output_muted": IsOutputMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_outputonly_muted": IsOutputOnlyMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_input_hardware": IsInputHardware = CommandDeserializer.DeserializeBool(value); break;
			case "client_output_hardware": IsClientOutputHardware = CommandDeserializer.DeserializeBool(value); break;
			case "client_meta_data": Metadata = CommandDeserializer.DeserializeString(value); break;
			case "client_is_recording": IsRecording = CommandDeserializer.DeserializeBool(value); break;
			case "client_channel_group_id": ChannelGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_channel_group_inherited_channel_id": InheritedChannelGroupFromChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_servergroups": ServerGroups = CommandDeserializer.DeserializeArray(value,CommandDeserializer.DeserializeUInt64); break;
			case "client_away": IsAway = CommandDeserializer.DeserializeBool(value); break;
			case "client_away_message": AwayMessage = CommandDeserializer.DeserializeString(value); break;
			case "client_talk_power": TalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_talk_request": RequestedTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_talk_request_msg": TalkPowerRequestMessage = CommandDeserializer.DeserializeString(value); break;
			case "client_is_talker": IsTalker = CommandDeserializer.DeserializeBool(value); break;
			case "client_is_priority_speaker": IsPrioritySpeaker = CommandDeserializer.DeserializeBool(value); break;
			case "client_unread_messages": UnreadMessages = CommandDeserializer.DeserializeInt32(value); break;
			case "client_nickname_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "client_needed_serverquery_view_power": NeededServerQueryViewPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_is_channel_commander": IsChannelCommander = CommandDeserializer.DeserializeBool(value); break;
			case "client_country": CountryCode = CommandDeserializer.DeserializeString(value); break;
			case "client_badges": Badges = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ClientLeftView : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientLeftView;
		

		public string ReasonMessage { get; set; }
		public TimeSpanSecondsT BanTime { get; set; }
		public MoveReason Reason { get; set; }
		public ChannelIdT TargetChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public ClientIdT ClientId { get; set; }
		public ChannelIdT SourceChannelId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "reasonmsg": ReasonMessage = CommandDeserializer.DeserializeString(value); break;
			case "bantime": BanTime = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			case "ctid": TargetChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "cfid": SourceChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class ClientMoved : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientMoved;
		

		public ClientIdT ClientId { get; set; }
		public MoveReason Reason { get; set; }
		public ChannelIdT TargetChannelId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			case "ctid": TargetChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ClientNeededPermissions : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientNeededPermissions;
		

		public PermissionId PermissionId { get; set; }
		public int PermissionValue { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "permid": PermissionId = (PermissionId)CommandDeserializer.DeserializeInt32(value); break;
			case "permvalue": PermissionValue = CommandDeserializer.DeserializeInt32(value); break;
			
			}

		}
	}

	public sealed class ClientServerGroupAdded : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ClientServerGroupAdded;
		

		public string Name { get; set; }
		public ServerGroupIdT ServerGroupId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public ClientIdT ClientId { get; set; }
		public ClientUidT ClientUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "sgid": ServerGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "cluid": ClientUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class CommandError : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.Error;
		

		public Ts3ErrorCode Id { get; set; }
		public string Message { get; set; }
		public PermissionId MissingPermissionId { get; set; }
		public string ReturnCode { get; set; }
		public string ExtraMessage { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "id": Id = (Ts3ErrorCode)CommandDeserializer.DeserializeUInt16(value); break;
			case "msg": Message = CommandDeserializer.DeserializeString(value); break;
			case "failed_permid": MissingPermissionId = (PermissionId)CommandDeserializer.DeserializeInt32(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			case "extra_msg": ExtraMessage = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ConnectionInfo : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ConnectionInfo;
		

		public ClientIdT ClientId { get; set; }
		public float ConnectionPing { get; set; }
		public float ConnectionPingDeviation { get; set; }
		public TimeSpanMillisecT ConnectionTime { get; set; }
		public string Ip { get; set; }
		public ushort ConnectionClientPort { get; set; }
		public long ConnectionPacketsSentSpeech { get; set; }
		public ulong ConnectionPacketsSentKeepalive { get; set; }
		public ulong ConnectionPacketsSentControl { get; set; }
		public ulong ConnectionBytesSentSpeech { get; set; }
		public ulong ConnectionBytesSentKeepalive { get; set; }
		public ulong ConnectionBytesSentControl { get; set; }
		public ulong ConnectionPacketsReceivedSpeech { get; set; }
		public ulong ConnectionPacketsReceivedKeepalive { get; set; }
		public ulong ConnectionPacketsReceivedControl { get; set; }
		public ulong ConnectionBytesReceivedSpeech { get; set; }
		public ulong ConnectionBytesReceivedKeepalive { get; set; }
		public ulong ConnectionBytesReceivedControl { get; set; }
		public float ConnectionServerToClientPacketlossSpeech { get; set; }
		public float ConnectionServerToClientPacketlossKeepalive { get; set; }
		public float ConnectionServerToClientPacketlossControl { get; set; }
		public float ConnectionServerToClientPacketlossTotal { get; set; }
		public float ConnectionClientToServerPacketlossSpeech { get; set; }
		public float ConnectionClientToServerPacketlossKeepalive { get; set; }
		public float ConnectionClientToServerPacketlossControl { get; set; }
		public float ConnectionClientToServerPacketlossTotal { get; set; }
		public uint ConnectionBandwidthSentLastSecondSpeech { get; set; }
		public uint ConnectionBandwidthSentLastSecondKeepalive { get; set; }
		public uint ConnectionBandwidthSentLastSecondControl { get; set; }
		public uint ConnectionBandwidthSentLastMinuteSpeech { get; set; }
		public uint ConnectionBandwidthSentLastMinuteKeepalive { get; set; }
		public uint ConnectionBandwidthSentLastMinuteControl { get; set; }
		public uint ConnectionBandwidthReceivedLastSecondSpeech { get; set; }
		public uint ConnectionBandwidthReceivedLastSecondKeepalive { get; set; }
		public uint ConnectionBandwidthReceivedLastSecondControl { get; set; }
		public uint ConnectionBandwidthReceivedLastMinuteSpeech { get; set; }
		public uint ConnectionBandwidthReceivedLastMinuteKeepalive { get; set; }
		public uint ConnectionBandwidthReceivedLastMinuteControl { get; set; }
		public long ConnectionFiletransferSent { get; set; }
		public long ConnectionFiletransferReceived { get; set; }
		public TimeSpanMillisecT ConnectionIdleTime { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "connection_ping": ConnectionPing = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_ping_deviation": ConnectionPingDeviation = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_connected_time": ConnectionTime = CommandDeserializer.DeserializeTimeSpanMillisec(value); break;
			case "connection_client_ip": Ip = CommandDeserializer.DeserializeString(value); break;
			case "connection_client_port": ConnectionClientPort = CommandDeserializer.DeserializeUInt16(value); break;
			case "connection_packets_sent_speech": ConnectionPacketsSentSpeech = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_packets_sent_keepalive": ConnectionPacketsSentKeepalive = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_packets_sent_control": ConnectionPacketsSentControl = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_sent_speech": ConnectionBytesSentSpeech = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_sent_keepalive": ConnectionBytesSentKeepalive = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_sent_control": ConnectionBytesSentControl = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_packets_received_speech": ConnectionPacketsReceivedSpeech = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_packets_received_keepalive": ConnectionPacketsReceivedKeepalive = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_packets_received_control": ConnectionPacketsReceivedControl = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_received_speech": ConnectionBytesReceivedSpeech = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_received_keepalive": ConnectionBytesReceivedKeepalive = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_bytes_received_control": ConnectionBytesReceivedControl = CommandDeserializer.DeserializeUInt64(value); break;
			case "connection_server2client_packetloss_speech": ConnectionServerToClientPacketlossSpeech = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_server2client_packetloss_keepalive": ConnectionServerToClientPacketlossKeepalive = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_server2client_packetloss_control": ConnectionServerToClientPacketlossControl = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_server2client_packetloss_total": ConnectionServerToClientPacketlossTotal = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_client2server_packetloss_speech": ConnectionClientToServerPacketlossSpeech = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_client2server_packetloss_keepalive": ConnectionClientToServerPacketlossKeepalive = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_client2server_packetloss_control": ConnectionClientToServerPacketlossControl = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_client2server_packetloss_total": ConnectionClientToServerPacketlossTotal = CommandDeserializer.DeserializeSingle(value); break;
			case "connection_bandwidth_sent_last_second_speech": ConnectionBandwidthSentLastSecondSpeech = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_sent_last_second_keepalive": ConnectionBandwidthSentLastSecondKeepalive = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_sent_last_second_control": ConnectionBandwidthSentLastSecondControl = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_sent_last_minute_speech": ConnectionBandwidthSentLastMinuteSpeech = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_sent_last_minute_keepalive": ConnectionBandwidthSentLastMinuteKeepalive = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_sent_last_minute_control": ConnectionBandwidthSentLastMinuteControl = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_second_speech": ConnectionBandwidthReceivedLastSecondSpeech = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_second_keepalive": ConnectionBandwidthReceivedLastSecondKeepalive = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_second_control": ConnectionBandwidthReceivedLastSecondControl = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_minute_speech": ConnectionBandwidthReceivedLastMinuteSpeech = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_minute_keepalive": ConnectionBandwidthReceivedLastMinuteKeepalive = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_bandwidth_received_last_minute_control": ConnectionBandwidthReceivedLastMinuteControl = CommandDeserializer.DeserializeUInt32(value); break;
			case "connection_filetransfer_bandwidth_sent": ConnectionFiletransferSent = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_filetransfer_bandwidth_received": ConnectionFiletransferReceived = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_idle_time": ConnectionIdleTime = CommandDeserializer.DeserializeTimeSpanMillisec(value); break;
			
			}

		}
	}

	public sealed class ConnectionInfoRequest : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ConnectionInfoRequest;
		


		public void SetField(string name, string value)
		{

		}
	}

	public sealed class FileListFinished : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.FileListFinished;
		

		public ChannelIdT ChannelId { get; set; }
		public string Path { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "path": Path = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class FileTransferStatus : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.FileTransferStatus;
		

		public ushort ClientFileTransferId { get; set; }
		public Ts3ErrorCode Status { get; set; }
		public string Message { get; set; }
		public long Size { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clientftfid": ClientFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "status": Status = (Ts3ErrorCode)CommandDeserializer.DeserializeUInt16(value); break;
			case "msg": Message = CommandDeserializer.DeserializeString(value); break;
			case "size": Size = CommandDeserializer.DeserializeInt64(value); break;
			
			}

		}
	}

	public sealed class InitIvExpand : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.InitIvExpand;
		

		public string Alpha { get; set; }
		public string Beta { get; set; }
		public string Omega { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "alpha": Alpha = CommandDeserializer.DeserializeString(value); break;
			case "beta": Beta = CommandDeserializer.DeserializeString(value); break;
			case "omega": Omega = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class InitServer : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.InitServer;
		

		public string WelcomeMessage { get; set; }
		public string ServerPlatform { get; set; }
		public string ServerVersion { get; set; }
		public int MaxClients { get; set; }
		public long ServerCreated { get; set; }
		public string Hostmessage { get; set; }
		public HostMessageMode HostmessageMode { get; set; }
		public ulong VirtualServerId { get; set; }
		public string ServerIp { get; set; }
		public bool AskForPrivilege { get; set; }
		public string ClientName { get; set; }
		public ClientIdT ClientId { get; set; }
		public ushort ProtocolVersion { get; set; }
		public ushort LicenseType { get; set; }
		public int TalkPower { get; set; }
		public int NeededServerQueryViewPower { get; set; }
		public string ServerName { get; set; }
		public CodecEncryptionMode CodecEncryptionMode { get; set; }
		public ServerGroupIdT DefaultServerGroup { get; set; }
		public ChannelGroupIdT DefaultChannelGroup { get; set; }
		public string HostbannerUrl { get; set; }
		public string HostbannerGfxUrl { get; set; }
		public TimeSpanSecondsT HostbannerGfxInterval { get; set; }
		public float PrioritySpeakerDimmModificator { get; set; }
		public string HostbuttonTooltip { get; set; }
		public string HostbuttonUrl { get; set; }
		public string HostbuttonGfxUrl { get; set; }
		public string PhoneticName { get; set; }
		public ulong IconId { get; set; }
		public HostBannerMode HostbannerMode { get; set; }
		public TimeSpanSecondsT DefaultTempChannelDeleteDelay { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "virtualserver_welcomemessage": WelcomeMessage = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_platform": ServerPlatform = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_version": ServerVersion = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "virtualserver_created": ServerCreated = CommandDeserializer.DeserializeInt64(value); break;
			case "virtualserver_hostmessage": Hostmessage = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostmessage_mode": HostmessageMode = CommandDeserializer.DeserializeEnum<HostMessageMode>(value); break;
			case "virtualserver_id": VirtualServerId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_ip": ServerIp = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_ask_for_privilegekey": AskForPrivilege = CommandDeserializer.DeserializeBool(value); break;
			case "acn": ClientName = CommandDeserializer.DeserializeString(value); break;
			case "aclid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "pv": ProtocolVersion = CommandDeserializer.DeserializeUInt16(value); break;
			case "lt": LicenseType = CommandDeserializer.DeserializeUInt16(value); break;
			case "client_talk_power": TalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_needed_serverquery_view_power": NeededServerQueryViewPower = CommandDeserializer.DeserializeInt32(value); break;
			case "virtualserver_name": ServerName = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_codec_encryption_mode": CodecEncryptionMode = CommandDeserializer.DeserializeEnum<CodecEncryptionMode>(value); break;
			case "virtualserver_default_server_group": DefaultServerGroup = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_default_channel_group": DefaultChannelGroup = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_hostbanner_url": HostbannerUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbanner_gfx_url": HostbannerGfxUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbanner_gfx_interval": HostbannerGfxInterval = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "virtualserver_priority_speaker_dimm_modificator": PrioritySpeakerDimmModificator = CommandDeserializer.DeserializeSingle(value); break;
			case "virtualserver_hostbutton_tooltip": HostbuttonTooltip = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbutton_url": HostbuttonUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbutton_gfx_url": HostbuttonGfxUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_name_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_icon_id": IconId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_hostbanner_mode": HostbannerMode = CommandDeserializer.DeserializeEnum<HostBannerMode>(value); break;
			case "virtualserver_channel_temp_delete_delay_default": DefaultTempChannelDeleteDelay = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			
			}

		}
	}

	public sealed class ServerEdited : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ServerEdited;
		

		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }
		public MoveReason Reason { get; set; }
		public string ServerName { get; set; }
		public CodecEncryptionMode CodecEncryptionMode { get; set; }
		public ServerGroupIdT DefaultServerGroup { get; set; }
		public ChannelGroupIdT DefaultChannelGroup { get; set; }
		public string HostbannerUrl { get; set; }
		public string HostbannerGfxUrl { get; set; }
		public TimeSpanSecondsT HostbannerGfxInterval { get; set; }
		public float PrioritySpeakerDimmModificator { get; set; }
		public string HostbuttonTooltip { get; set; }
		public string HostbuttonUrl { get; set; }
		public string HostbuttonGfxUrl { get; set; }
		public string PhoneticName { get; set; }
		public ulong IconId { get; set; }
		public HostBannerMode HostbannerMode { get; set; }
		public TimeSpanSecondsT DefaultTempChannelDeleteDelay { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			case "reasonid": Reason = CommandDeserializer.DeserializeEnum<MoveReason>(value); break;
			case "virtualserver_name": ServerName = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_codec_encryption_mode": CodecEncryptionMode = CommandDeserializer.DeserializeEnum<CodecEncryptionMode>(value); break;
			case "virtualserver_default_server_group": DefaultServerGroup = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_default_channel_group": DefaultChannelGroup = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_hostbanner_url": HostbannerUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbanner_gfx_url": HostbannerGfxUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbanner_gfx_interval": HostbannerGfxInterval = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "virtualserver_priority_speaker_dimm_modificator": PrioritySpeakerDimmModificator = CommandDeserializer.DeserializeSingle(value); break;
			case "virtualserver_hostbutton_tooltip": HostbuttonTooltip = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbutton_url": HostbuttonUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_hostbutton_gfx_url": HostbuttonGfxUrl = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_name_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_icon_id": IconId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_hostbanner_mode": HostbannerMode = CommandDeserializer.DeserializeEnum<HostBannerMode>(value); break;
			case "virtualserver_channel_temp_delete_delay_default": DefaultTempChannelDeleteDelay = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			
			}

		}
	}

	public sealed class ServerGroupList : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.ServerGroupList;
		

		public ServerGroupIdT ServerGroupId { get; set; }
		public string Name { get; set; }
		public PermissionGroupDatabaseType GroupType { get; set; }
		public int IconId { get; set; }
		public bool GroupIsPermanent { get; set; }
		public int SortId { get; set; }
		public GroupNamingMode NamingMode { get; set; }
		public int NeededModifyPower { get; set; }
		public int NeededMemberAddPower { get; set; }
		public int NeededMemberRemovePower { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "sgid": ServerGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "type": GroupType = CommandDeserializer.DeserializeEnum<PermissionGroupDatabaseType>(value); break;
			case "iconid": IconId = CommandDeserializer.DeserializeInt32(value); break;
			case "savedb": GroupIsPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "sortid": SortId = CommandDeserializer.DeserializeInt32(value); break;
			case "namemode": NamingMode = CommandDeserializer.DeserializeEnum<GroupNamingMode>(value); break;
			case "n_modifyp": NeededModifyPower = CommandDeserializer.DeserializeInt32(value); break;
			case "n_member_addp": NeededMemberAddPower = CommandDeserializer.DeserializeInt32(value); break;
			case "n_member_remove_p": NeededMemberRemovePower = CommandDeserializer.DeserializeInt32(value); break;
			
			}

		}
	}

	public sealed class TextMessage : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.TextMessage;
		

		public TextMessageTargetMode Target { get; set; }
		public string Message { get; set; }
		public ClientIdT TargetClientId { get; set; }
		public ClientIdT InvokerId { get; set; }
		public string InvokerName { get; set; }
		public ClientUidT InvokerUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "targetmode": Target = CommandDeserializer.DeserializeEnum<TextMessageTargetMode>(value); break;
			case "msg": Message = CommandDeserializer.DeserializeString(value); break;
			case "target": TargetClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokerid": InvokerId = CommandDeserializer.DeserializeUInt16(value); break;
			case "invokername": InvokerName = CommandDeserializer.DeserializeString(value); break;
			case "invokeruid": InvokerUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class TokenUsed : INotification  
	{
		public NotificationType NotifyType { get; } = NotificationType.TokenUsed;
		

		public string UsedToken { get; set; }
		public string TokenCustomSet { get; set; }
		public string Token1 { get; set; }
		public string Token2 { get; set; }
		public ClientIdT ClientId { get; set; }
		public ClientDbIdT ClientDbId { get; set; }
		public ClientUidT ClientUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "token": UsedToken = CommandDeserializer.DeserializeString(value); break;
			case "tokencustomset": TokenCustomSet = CommandDeserializer.DeserializeString(value); break;
			case "token1": Token1 = CommandDeserializer.DeserializeString(value); break;
			case "token2": Token2 = CommandDeserializer.DeserializeString(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "cldbid": ClientDbId = CommandDeserializer.DeserializeUInt64(value); break;
			case "cluid": ClientUid = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class ChannelData :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public ChannelIdT Id { get; set; }
		public ChannelIdT ParentChannelId { get; set; }
		public TimeSpanSecondsT DurationEmpty { get; set; }
		public int TotalFamilyClients { get; set; }
		public int TotalClients { get; set; }
		public int NeededSubscribePower { get; set; }
		public int Order { get; set; }
		public string Name { get; set; }
		public string Topic { get; set; }
		public bool IsDefaultChannel { get; set; }
		public bool HasPassword { get; set; }
		public bool IsPermanent { get; set; }
		public bool IsSemiPermanent { get; set; }
		public Codec Codec { get; set; }
		public int CodecQuality { get; set; }
		public int NeededTalkPower { get; set; }
		public long IconId { get; set; }
		public int MaxClients { get; set; }
		public int MaxFamilyClients { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "id": Id = CommandDeserializer.DeserializeUInt64(value); break;
			case "pid": ParentChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "seconds_empty": DurationEmpty = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "total_clients_family": TotalFamilyClients = CommandDeserializer.DeserializeInt32(value); break;
			case "total_clients": TotalClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_needed_subscribe_power": NeededSubscribePower = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_order": Order = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_name": Name = CommandDeserializer.DeserializeString(value); break;
			case "channel_topic": Topic = CommandDeserializer.DeserializeString(value); break;
			case "channel_flag_default": IsDefaultChannel = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_password": HasPassword = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_permanent": IsPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_flag_semi_permanent": IsSemiPermanent = CommandDeserializer.DeserializeBool(value); break;
			case "channel_codec": Codec = CommandDeserializer.DeserializeEnum<Codec>(value); break;
			case "channel_codec_quality": CodecQuality = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_needed_talk_power": NeededTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "channel_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "channel_maxfamilyclients": MaxFamilyClients = CommandDeserializer.DeserializeInt32(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ClientData :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public ClientIdT ClientId { get; set; }
		public ClientUidT Uid { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public ClientDbIdT DatabaseId { get; set; }
		public string NickName { get; set; }
		public ClientType ClientType { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "client_unique_identifier": Uid = CommandDeserializer.DeserializeString(value); break;
			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_database_id": DatabaseId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_nickname": NickName = CommandDeserializer.DeserializeString(value); break;
			case "client_type": ClientType = CommandDeserializer.DeserializeEnum<ClientType>(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ClientDbData :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public string LastIp { get; set; }
		public ClientIdT ClientId { get; set; }
		public ClientUidT Uid { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public ClientDbIdT DatabaseId { get; set; }
		public string NickName { get; set; }
		public ClientType ClientType { get; set; }
		public string AvatarFlag { get; set; }
		public string Description { get; set; }
		public long IconId { get; set; }
		public DateTime CreationDate { get; set; }
		public DateTime LastConnected { get; set; }
		public int TotalConnections { get; set; }
		public long MonthlyUploadQuota { get; set; }
		public long MonthlyDownloadQuota { get; set; }
		public long TotalUploadQuota { get; set; }
		public long TotalDownloadQuota { get; set; }
		public string Base64HashClientUid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "client_lastip": LastIp = CommandDeserializer.DeserializeString(value); break;
			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "client_unique_identifier": Uid = CommandDeserializer.DeserializeString(value); break;
			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_database_id": DatabaseId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_nickname": NickName = CommandDeserializer.DeserializeString(value); break;
			case "client_type": ClientType = CommandDeserializer.DeserializeEnum<ClientType>(value); break;
			case "client_flag_avatar": AvatarFlag = CommandDeserializer.DeserializeString(value); break;
			case "client_description": Description = CommandDeserializer.DeserializeString(value); break;
			case "client_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "client_created": CreationDate = CommandDeserializer.DeserializeDateTime(value); break;
			case "client_lastconnected": LastConnected = CommandDeserializer.DeserializeDateTime(value); break;
			case "client_totalconnections": TotalConnections = CommandDeserializer.DeserializeInt32(value); break;
			case "client_month_bytes_uploaded": MonthlyUploadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_month_bytes_downloaded": MonthlyDownloadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_total_bytes_uploaded": TotalUploadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_total_bytes_downloaded": TotalDownloadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_base64HashClientUID": Base64HashClientUid = CommandDeserializer.DeserializeString(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ClientInfo :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public TimeSpanMillisecT ClientIdleTime { get; set; }
		public string ClientVersion { get; set; }
		public string ClientVersionSign { get; set; }
		public string ClientPlattform { get; set; }
		public string DefaultChannel { get; set; }
		public string SecurityHash { get; set; }
		public string LoginName { get; set; }
		public string DefaultToken { get; set; }
		public long ConnectionFiletransferSent { get; set; }
		public long ConnectionFiletransferReceived { get; set; }
		public long ConnectionPacketsSent { get; set; }
		public long ConnectionPacketsReceived { get; set; }
		public long ConnectionBytesSent { get; set; }
		public long ConnectionBytesReceived { get; set; }
		public long ConnectionBandwidtSentLastSecond { get; set; }
		public long ConnectionBandwidtReceivedLastSecond { get; set; }
		public long ConnectionBandwidtSentLastMinute { get; set; }
		public long ConnectionBandwidtReceivedLastMinute { get; set; }
		public TimeSpanMillisecT ConnectionTime { get; set; }
		public string Ip { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public ClientUidT Uid { get; set; }
		public ClientDbIdT DatabaseId { get; set; }
		public string NickName { get; set; }
		public ClientType ClientType { get; set; }
		public bool IsInputMuted { get; set; }
		public bool IsOutputMuted { get; set; }
		public bool IsOutputOnlyMuted { get; set; }
		public bool IsInputHardware { get; set; }
		public bool IsClientOutputHardware { get; set; }
		public string Metadata { get; set; }
		public bool IsRecording { get; set; }
		public ChannelGroupIdT ChannelGroupId { get; set; }
		public ChannelGroupIdT InheritedChannelGroupFromChannelId { get; set; }
		public ServerGroupIdT[] ServerGroups { get; set; }
		public bool IsAway { get; set; }
		public string AwayMessage { get; set; }
		public int TalkPower { get; set; }
		public int RequestedTalkPower { get; set; }
		public string TalkPowerRequestMessage { get; set; }
		public bool IsTalker { get; set; }
		public bool IsPrioritySpeaker { get; set; }
		public int UnreadMessages { get; set; }
		public string PhoneticName { get; set; }
		public int NeededServerQueryViewPower { get; set; }
		public bool IsChannelCommander { get; set; }
		public string CountryCode { get; set; }
		public string Badges { get; set; }
		public DateTime CreationDate { get; set; }
		public DateTime LastConnected { get; set; }
		public int TotalConnections { get; set; }
		public long MonthlyUploadQuota { get; set; }
		public long MonthlyDownloadQuota { get; set; }
		public long TotalUploadQuota { get; set; }
		public long TotalDownloadQuota { get; set; }
		public string Base64HashClientUid { get; set; }
		public string AvatarFlag { get; set; }
		public string Description { get; set; }
		public long IconId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "client_idle_time": ClientIdleTime = CommandDeserializer.DeserializeTimeSpanMillisec(value); break;
			case "client_version": ClientVersion = CommandDeserializer.DeserializeString(value); break;
			case "client_version_sign": ClientVersionSign = CommandDeserializer.DeserializeString(value); break;
			case "client_platform": ClientPlattform = CommandDeserializer.DeserializeString(value); break;
			case "client_default_channel": DefaultChannel = CommandDeserializer.DeserializeString(value); break;
			case "client_security_hash": SecurityHash = CommandDeserializer.DeserializeString(value); break;
			case "client_login_name": LoginName = CommandDeserializer.DeserializeString(value); break;
			case "client_default_token": DefaultToken = CommandDeserializer.DeserializeString(value); break;
			case "connection_filetransfer_bandwidth_sent": ConnectionFiletransferSent = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_filetransfer_bandwidth_received": ConnectionFiletransferReceived = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_packets_sent_total": ConnectionPacketsSent = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_packets_received_total": ConnectionPacketsReceived = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bytes_sent_total": ConnectionBytesSent = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bytes_received_total": ConnectionBytesReceived = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bandwidth_sent_last_second_total": ConnectionBandwidtSentLastSecond = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bandwidth_received_last_second_total": ConnectionBandwidtReceivedLastSecond = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bandwidth_sent_last_minute_total": ConnectionBandwidtSentLastMinute = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_bandwidth_received_last_minute_total": ConnectionBandwidtReceivedLastMinute = CommandDeserializer.DeserializeInt64(value); break;
			case "connection_connected_time": ConnectionTime = CommandDeserializer.DeserializeTimeSpanMillisec(value); break;
			case "connection_client_ip": Ip = CommandDeserializer.DeserializeString(value); break;
			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_unique_identifier": Uid = CommandDeserializer.DeserializeString(value); break;
			case "client_database_id": DatabaseId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_nickname": NickName = CommandDeserializer.DeserializeString(value); break;
			case "client_type": ClientType = CommandDeserializer.DeserializeEnum<ClientType>(value); break;
			case "client_input_muted": IsInputMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_output_muted": IsOutputMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_outputonly_muted": IsOutputOnlyMuted = CommandDeserializer.DeserializeBool(value); break;
			case "client_input_hardware": IsInputHardware = CommandDeserializer.DeserializeBool(value); break;
			case "client_output_hardware": IsClientOutputHardware = CommandDeserializer.DeserializeBool(value); break;
			case "client_meta_data": Metadata = CommandDeserializer.DeserializeString(value); break;
			case "client_is_recording": IsRecording = CommandDeserializer.DeserializeBool(value); break;
			case "client_channel_group_id": ChannelGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_channel_group_inherited_channel_id": InheritedChannelGroupFromChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_servergroups": ServerGroups = CommandDeserializer.DeserializeArray(value,CommandDeserializer.DeserializeUInt64); break;
			case "client_away": IsAway = CommandDeserializer.DeserializeBool(value); break;
			case "client_away_message": AwayMessage = CommandDeserializer.DeserializeString(value); break;
			case "client_talk_power": TalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_talk_request": RequestedTalkPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_talk_request_msg": TalkPowerRequestMessage = CommandDeserializer.DeserializeString(value); break;
			case "client_is_talker": IsTalker = CommandDeserializer.DeserializeBool(value); break;
			case "client_is_priority_speaker": IsPrioritySpeaker = CommandDeserializer.DeserializeBool(value); break;
			case "client_unread_messages": UnreadMessages = CommandDeserializer.DeserializeInt32(value); break;
			case "client_nickname_phonetic": PhoneticName = CommandDeserializer.DeserializeString(value); break;
			case "client_needed_serverquery_view_power": NeededServerQueryViewPower = CommandDeserializer.DeserializeInt32(value); break;
			case "client_is_channel_commander": IsChannelCommander = CommandDeserializer.DeserializeBool(value); break;
			case "client_country": CountryCode = CommandDeserializer.DeserializeString(value); break;
			case "client_badges": Badges = CommandDeserializer.DeserializeString(value); break;
			case "client_created": CreationDate = CommandDeserializer.DeserializeDateTime(value); break;
			case "client_lastconnected": LastConnected = CommandDeserializer.DeserializeDateTime(value); break;
			case "client_totalconnections": TotalConnections = CommandDeserializer.DeserializeInt32(value); break;
			case "client_month_bytes_uploaded": MonthlyUploadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_month_bytes_downloaded": MonthlyDownloadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_total_bytes_uploaded": TotalUploadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_total_bytes_downloaded": TotalDownloadQuota = CommandDeserializer.DeserializeInt64(value); break;
			case "client_base64HashClientUID": Base64HashClientUid = CommandDeserializer.DeserializeString(value); break;
			case "client_flag_avatar": AvatarFlag = CommandDeserializer.DeserializeString(value); break;
			case "client_description": Description = CommandDeserializer.DeserializeString(value); break;
			case "client_icon_id": IconId = CommandDeserializer.DeserializeInt64(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ServerData :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public int ClientsOnline { get; set; }
		public int QueriesOnline { get; set; }
		public int MaxClients { get; set; }
		public TimeSpanSecondsT Uptime { get; set; }
		public bool Autostart { get; set; }
		public string MachineId { get; set; }
		public string ServerName { get; set; }
		public ulong VirtualServerId { get; set; }
		public ClientUidT VirtualServerUid { get; set; }
		public ushort VirtualServerPort { get; set; }
		public string VirtualServerStatus { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "virtualserver_clientsonline": ClientsOnline = CommandDeserializer.DeserializeInt32(value); break;
			case "virtualserver_queryclientsonline": QueriesOnline = CommandDeserializer.DeserializeInt32(value); break;
			case "virtualserver_maxclients": MaxClients = CommandDeserializer.DeserializeInt32(value); break;
			case "virtualserver_uptime": Uptime = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			case "virtualserver_autostart": Autostart = CommandDeserializer.DeserializeBool(value); break;
			case "virtualserver_machine_id": MachineId = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_name": ServerName = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_id": VirtualServerId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_unique_identifier": VirtualServerUid = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_port": VirtualServerPort = CommandDeserializer.DeserializeUInt16(value); break;
			case "virtualserver_status": VirtualServerStatus = CommandDeserializer.DeserializeString(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ServerGroupAddResponse :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public ServerGroupIdT ServerGroupId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "sgid": ServerGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class WhoAmI :   IResponse
	{
		
		public string ReturnCode { get; set; }

		public ClientIdT ClientId { get; set; }
		public ChannelIdT ChannelId { get; set; }
		public string NickName { get; set; }
		public ClientDbIdT DatabaseId { get; set; }
		public string LoginName { get; set; }
		public ulong OriginServerId { get; set; }
		public ulong VirtualServerId { get; set; }
		public ClientUidT VirtualServerUid { get; set; }
		public ushort VirtualServerPort { get; set; }
		public string VirtualServerStatus { get; set; }
		public ClientUidT Uid { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "client_id": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "client_channel_id": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_nickname": NickName = CommandDeserializer.DeserializeString(value); break;
			case "client_database_id": DatabaseId = CommandDeserializer.DeserializeUInt64(value); break;
			case "client_login_name": LoginName = CommandDeserializer.DeserializeString(value); break;
			case "client_origin_server_id": OriginServerId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_id": VirtualServerId = CommandDeserializer.DeserializeUInt64(value); break;
			case "virtualserver_unique_identifier": VirtualServerUid = CommandDeserializer.DeserializeString(value); break;
			case "virtualserver_port": VirtualServerPort = CommandDeserializer.DeserializeUInt16(value); break;
			case "virtualserver_status": VirtualServerStatus = CommandDeserializer.DeserializeString(value); break;
			case "client_unique_identifier": Uid = CommandDeserializer.DeserializeString(value); break;
			case "return_code": ReturnCode = CommandDeserializer.DeserializeString(value); break;
			}

		}
	}

	public sealed class ClientServerGroup : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.ServerGroupsByClientId;
		public string ReturnCode { get; set; }

		public string Name { get; set; }
		public ServerGroupIdT ServerGroupId { get; set; }
		public ClientDbIdT ClientDbId { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "sgid": ServerGroupId = CommandDeserializer.DeserializeUInt64(value); break;
			case "cldbid": ClientDbId = CommandDeserializer.DeserializeUInt64(value); break;
			
			}

		}
	}

	public sealed class FileDownload : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.StartDownload;
		public string ReturnCode { get; set; }

		public ushort ClientFileTransferId { get; set; }
		public ushort ServerFileTransferId { get; set; }
		public string FileTransferKey { get; set; }
		public ushort Port { get; set; }
		public long Size { get; set; }
		public string Message { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clientftfid": ClientFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "serverftfid": ServerFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "ftkey": FileTransferKey = CommandDeserializer.DeserializeString(value); break;
			case "port": Port = CommandDeserializer.DeserializeUInt16(value); break;
			case "size": Size = CommandDeserializer.DeserializeInt64(value); break;
			case "msg": Message = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public sealed class FileInfoTs : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.FileInfo;
		public string ReturnCode { get; set; }

		public ChannelIdT ChannelId { get; set; }
		public string Path { get; set; }
		public string Name { get; set; }
		public long Size { get; set; }
		public DateTime DateTime { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "path": Path = CommandDeserializer.DeserializeString(value); break;
			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "size": Size = CommandDeserializer.DeserializeInt64(value); break;
			case "datetime": DateTime = CommandDeserializer.DeserializeDateTime(value); break;
			
			}

		}
	}

	public sealed class FileList : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.FileList;
		public string ReturnCode { get; set; }

		public ChannelIdT ChannelId { get; set; }
		public string Path { get; set; }
		public string Name { get; set; }
		public long Size { get; set; }
		public DateTime DateTime { get; set; }
		public bool IsFile { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "cid": ChannelId = CommandDeserializer.DeserializeUInt64(value); break;
			case "path": Path = CommandDeserializer.DeserializeString(value); break;
			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "size": Size = CommandDeserializer.DeserializeInt64(value); break;
			case "datetime": DateTime = CommandDeserializer.DeserializeDateTime(value); break;
			case "type": IsFile = CommandDeserializer.DeserializeBool(value); break;
			
			}

		}
	}

	public sealed class FileTransfer : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.FileTransfer;
		public string ReturnCode { get; set; }

		public ClientIdT ClientId { get; set; }
		public string Path { get; set; }
		public string Name { get; set; }
		public long Size { get; set; }
		public long SizeDone { get; set; }
		public ushort ClientFileTransferId { get; set; }
		public ushort ServerFileTransferId { get; set; }
		public ulong Sender { get; set; }
		public int Status { get; set; }
		public float CurrentSpeed { get; set; }
		public float AverageSpeed { get; set; }
		public TimeSpanSecondsT Runtime { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clid": ClientId = CommandDeserializer.DeserializeUInt16(value); break;
			case "path": Path = CommandDeserializer.DeserializeString(value); break;
			case "name": Name = CommandDeserializer.DeserializeString(value); break;
			case "size": Size = CommandDeserializer.DeserializeInt64(value); break;
			case "sizedone": SizeDone = CommandDeserializer.DeserializeInt64(value); break;
			case "clientftfid": ClientFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "serverftfid": ServerFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "sender": Sender = CommandDeserializer.DeserializeUInt64(value); break;
			case "status": Status = CommandDeserializer.DeserializeInt32(value); break;
			case "current_speed": CurrentSpeed = CommandDeserializer.DeserializeSingle(value); break;
			case "average_speed": AverageSpeed = CommandDeserializer.DeserializeSingle(value); break;
			case "runtime": Runtime = CommandDeserializer.DeserializeTimeSpanSeconds(value); break;
			
			}

		}
	}

	public sealed class FileUpload : INotification , IResponse
	{
		public NotificationType NotifyType { get; } = NotificationType.StartUpload;
		public string ReturnCode { get; set; }

		public ushort ClientFileTransferId { get; set; }
		public ushort ServerFileTransferId { get; set; }
		public string FileTransferKey { get; set; }
		public ushort Port { get; set; }
		public long SeekPosistion { get; set; }
		public string Message { get; set; }

		public void SetField(string name, string value)
		{

			switch(name)
			{

			case "clientftfid": ClientFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "serverftfid": ServerFileTransferId = CommandDeserializer.DeserializeUInt16(value); break;
			case "ftkey": FileTransferKey = CommandDeserializer.DeserializeString(value); break;
			case "port": Port = CommandDeserializer.DeserializeUInt16(value); break;
			case "seekpos": SeekPosistion = CommandDeserializer.DeserializeInt64(value); break;
			case "msg": Message = CommandDeserializer.DeserializeString(value); break;
			
			}

		}
	}

	public static class MessageHelper
	{
		public static NotificationType GetNotificationType(string name)
		{
			switch(name)
			{

			case "error": return NotificationType.Error;
			case "notifychannelchanged": return NotificationType.ChannelChanged;
			case "notifychannelcreated": return NotificationType.ChannelCreated;
			case "notifychanneldeleted": return NotificationType.ChannelDeleted;
			case "notifychanneledited": return NotificationType.ChannelEdited;
			case "notifychannelmoved": return NotificationType.ChannelMoved;
			case "notifychannelpasswordchanged": return NotificationType.ChannelPasswordChanged;
			case "notifycliententerview": return NotificationType.ClientEnterView;
			case "notifyclientleftview": return NotificationType.ClientLeftView;
			case "notifyclientmoved": return NotificationType.ClientMoved;
			case "notifyserveredited": return NotificationType.ServerEdited;
			case "notifytextmessage": return NotificationType.TextMessage;
			case "notifytokenused": return NotificationType.TokenUsed;
			case "channellist": return NotificationType.ChannelList;
			case "channellistfinished": return NotificationType.ChannelListFinished;
			case "initivexpand": return NotificationType.InitIvExpand;
			case "initserver": return NotificationType.InitServer;
			case "notifychannelsubscribed": return NotificationType.ChannelSubscribed;
			case "notifychannelunsubscribed": return NotificationType.ChannelUnsubscribed;
			case "notifyclientchannelgroupchanged": return NotificationType.ClientChannelGroupChanged;
			case "notifyclientchatcomposing": return NotificationType.ClientChatComposing;
			case "notifyclientneededpermissions": return NotificationType.ClientNeededPermissions;
			case "notifyconnectioninfo": return NotificationType.ConnectionInfo;
			case "notifyconnectioninforequest": return NotificationType.ConnectionInfoRequest;
			case "notifyfileinfo": return NotificationType.FileInfo;
			case "notifyfilelist": return NotificationType.FileList;
			case "notifyfilelistfinished": return NotificationType.FileListFinished;
			case "notifyfiletransferlist": return NotificationType.FileTransfer;
			case "notifyservergroupclientadded": return NotificationType.ClientServerGroupAdded;
			case "notifyservergrouplist": return NotificationType.ServerGroupList;
			case "notifyservergroupsbyclientid": return NotificationType.ServerGroupsByClientId;
			case "notifystartdownload": return NotificationType.StartDownload;
			case "notifystartupload": return NotificationType.StartUpload;
			case "notifystatusfiletransfer": return NotificationType.FileTransferStatus;
			default: return NotificationType.Unknown;
			}
		}

		public static INotification GenerateNotificationType(NotificationType name)
		{
			switch(name)
			{

			case NotificationType.Error: return new CommandError();
			case NotificationType.ChannelChanged: return new ChannelChanged();
			case NotificationType.ChannelCreated: return new ChannelCreated();
			case NotificationType.ChannelDeleted: return new ChannelDeleted();
			case NotificationType.ChannelEdited: return new ChannelEdited();
			case NotificationType.ChannelMoved: return new ChannelMoved();
			case NotificationType.ChannelPasswordChanged: return new ChannelPasswordChanged();
			case NotificationType.ClientEnterView: return new ClientEnterView();
			case NotificationType.ClientLeftView: return new ClientLeftView();
			case NotificationType.ClientMoved: return new ClientMoved();
			case NotificationType.ServerEdited: return new ServerEdited();
			case NotificationType.TextMessage: return new TextMessage();
			case NotificationType.TokenUsed: return new TokenUsed();
			case NotificationType.ChannelList: return new ChannelList();
			case NotificationType.ChannelListFinished: return new ChannelListFinished();
			case NotificationType.InitIvExpand: return new InitIvExpand();
			case NotificationType.InitServer: return new InitServer();
			case NotificationType.ChannelSubscribed: return new ChannelSubscribed();
			case NotificationType.ChannelUnsubscribed: return new ChannelUnsubscribed();
			case NotificationType.ClientChannelGroupChanged: return new ClientChannelGroupChanged();
			case NotificationType.ClientChatComposing: return new ClientChatComposing();
			case NotificationType.ClientNeededPermissions: return new ClientNeededPermissions();
			case NotificationType.ConnectionInfo: return new ConnectionInfo();
			case NotificationType.ConnectionInfoRequest: return new ConnectionInfoRequest();
			case NotificationType.FileInfo: return new FileInfoTs();
			case NotificationType.FileList: return new FileList();
			case NotificationType.FileListFinished: return new FileListFinished();
			case NotificationType.FileTransfer: return new FileTransfer();
			case NotificationType.ClientServerGroupAdded: return new ClientServerGroupAdded();
			case NotificationType.ServerGroupList: return new ServerGroupList();
			case NotificationType.ServerGroupsByClientId: return new ClientServerGroup();
			case NotificationType.StartDownload: return new FileDownload();
			case NotificationType.StartUpload: return new FileUpload();
			case NotificationType.FileTransferStatus: return new FileTransferStatus();
			case NotificationType.Unknown:
			default: throw Util.UnhandledDefault(name);
			}
		}
	}
}

